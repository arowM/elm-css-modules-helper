module Main exposing (main)

{-| This sample app shows how to use CSS modules in Elm without hack.
Without using `arowM/elm-html-with-context`, it is needed to pass `style` value explicitly to almost all view functions.
See `examples/real-world` to check how it uses `elm-html-with-context` to pass such contexts to all view functions implicitly.
-}

import Browser
import CssClass exposing (CssClass, class)
import Html exposing (Attribute, Html)
import Html.Attributes as Attributes
import Html.Events as Events
import Html.Lazy as Html
import Json.Decode as Decode exposing (Decoder, Value)



-- APP


main : Program Value Model Msg
main =
    Browser.element
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }



-- Model


type alias Model =
    { style : Style
    , inputBox1 : Maybe String
    , inputBox2 : Maybe String
    }


{-| This type represents dictionaries for CSS class names generated by CSS modules.
-}
type alias Style =
    { layout : CssClass
    , label : CssClass
    , input : CssClass
    , app : CssClass
    }


{-| Decoder for `Style`.
Input JSON would be following format.

```json
{ "layout": {
    "wrap": "layout__wrap--22P2G",
    "pack": "layout__pack--2OmbP",
    ...
  },
  "input": {
    ...
  },
  ...
}
```

-}
decoder : Decoder Style
decoder =
    Decode.map4 Style
        (Decode.field "layout" CssClass.decode)
        (Decode.field "label" CssClass.decode)
        (Decode.field "input" CssClass.decode)
        (Decode.field "app" CssClass.decode)


init : Value -> ( Model, Cmd Msg )
init v =
    ( { style =
            Decode.decodeValue decoder v
                |> Result.toMaybe
                |> Maybe.withDefault
                    -- `CssClass.empty` is used when failing to parse flags.
                    { layout = CssClass.empty
                    , label = CssClass.empty
                    , input = CssClass.empty
                    , app = CssClass.empty
                    }
      , inputBox1 = Nothing
      , inputBox2 = Nothing
      }
    , Cmd.none
    )



-- Update


type Msg
    = OnInputInputBox1 String
    | OnInputInputBox2 String


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        OnInputInputBox1 str ->
            ( { model
                | inputBox1 = Just str
              }
            , Cmd.none
            )

        OnInputInputBox2 str ->
            ( { model
                | inputBox2 = Just str
              }
            , Cmd.none
            )



-- View


view : Model -> Html Msg
view model =
    wrap model.style
        [ inputRow model.style "item 1" OnInputInputBox1 model.inputBox1
        , inputRow model.style "item 2" OnInputInputBox2 model.inputBox2
        ]



-- Molecular view


inputRow : Style -> String -> (String -> Msg) -> Maybe String -> Html Msg
inputRow style name onInput val =
    wrap style
        [ Html.div
            -- This `class` function is exposed by `CssClass` module.
            -- It actually generates something like:
            -- `Html.Attributes.class "app__inputRow--aAOLM"`
            [ class style.app "inputRow"
            , class style.layout "row"
            , class style.layout "alignCenter"
            ]
            [ label style name
            , expanded style
                [ input style onInput val
                ]
            ]
        ]



-- Atomic views


label : Style -> String -> Html Msg
label style str =
    wrap style
        [ Html.lazy2 label_ style str
        ]


label_ : Style -> String -> Html Msg
label_ style str =
    Debug.log "label_ was called" <|
        Html.div
            [ class style.label "default"
            ]
            [ Html.text str
            ]


input : Style -> (String -> Msg) -> Maybe String -> Html Msg
input style onInput val =
    wrap style
        [ Html.lazy3 input_ style onInput val
        ]


input_ : Style -> (String -> Msg) -> Maybe String -> Html Msg
input_ style onInput val =
    Debug.log "input_ was called" <|
        Html.input
            [ class style.input "default"
            , Attributes.type_ "text"
            , Attributes.value <| Maybe.withDefault "" val
            , Events.onInput onInput
            ]
            []



-- Layout functions


layout : String -> Style -> List (Html Msg) -> Html Msg
layout key style =
    Html.div
        [ class style.layout key
        ]


wrap : Style -> List (Html Msg) -> Html Msg
wrap =
    layout "wrap"


expanded : Style -> List (Html Msg) -> Html Msg
expanded =
    layout "expanded"



-- Subscription


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none
