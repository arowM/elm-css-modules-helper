module CssClass exposing
    ( CssClass
    , decode
    , empty
    , class
    , classList
    )

{-| Provide helper functions to handle CSS modules in Elm without hacks


# Types

@docs CssClass


# Core functions

@docs decode
@docs empty
@docs class
@docs classList

-}

import Dict exposing (Dict)
import Html exposing (Attribute, Html)
import Html.Attributes as Attributes
import Json.Decode as Decode exposing (Decoder)


{-| An opaque type representing transformed class name JSON object generated by CSS modules.
-}
type CssClass
    = CssClass (Dict String String)


{-| Decode CSS transformed class name JSON object to `CssClass`.
-}
decode : Decoder CssClass
decode =
    Decode.map CssClass <| Decode.dict Decode.string


{-| A `CssClass` value which contains nothing.
This value can be used as a default value for failing to decode JSON object.
-}
empty : CssClass
empty =
    CssClass <| Dict.empty


{-| An alternative function to `Html.Attributes.class`.
This function actually sets a class attribute with value of transformed class name.

e.g., If provided following JSON object and it is decoded as `cssClass : CssClass` by `decode` function,

```json
{
  "title": "_title_xkpkl_5 _title_116zl_1",
  "article": "_article_xkpkl_10",
}
```

    CssClasses.class cssClass "title"

This is equivalent to

    Html.Attributes.class "_title_xkpkl_5 _title_116zl_1"

-}
class : CssClass -> String -> Attribute msg
class (CssClass dict) key =
    Attributes.class (Dict.get key dict |> Maybe.withDefault "")


{-| An alternative function to `Html.Attributes.classList`
-}
classList : CssClass -> List ( String, Bool ) -> Attribute msg
classList (CssClass dict) ls =
    Attributes.classList <| List.filterMap (\( key, b ) -> Dict.get key dict |> Maybe.map (\val -> ( val, b ))) ls
